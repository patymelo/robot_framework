name: Robot Framework CI

on:
   push:
    branches: [ "main" ]
   pull_request:
    branches: [ "main" ]
   workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        python-version: [3.11]  # 3.12, pypy-3.9
        selenium-version:  [4.21.0]
        browser: [firefox, chrome, headlesschrome]  #edge
    
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }} with Robot Framework ${{ matrix.rf-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Setup Chrome
      uses: browser-actions/setup-chrome@latest
      with:
        chrome-version: latest
      id: setup-chrome
    - run: |
        echo Installed chromium version: ${{ steps.setup-chrome.outputs.chrome-version }}
        ${{ steps.setup-chrome.outputs.chrome-path }} --version
    - name: Setup firefox
      id: setup-firefox
      uses: browser-actions/setup-firefox@v1
      with:
        firefox-version: latest
    - run: |
        echo Installed firefox versions: ${{ steps.setup-firefox.outputs.firefox-version }}
        ${{ steps.setup-firefox.outputs.firefox-path }} --version
    - name: Install dependencies
      if: matrix.python-version != 'pypy-3.7'
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    - name: Install dependencies for pypy
      if: matrix.python-version == 'pypy-3.9'
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install robotstatuschecker>=1.4
        pip install requests robotframework-pabot
    - name: Install Seleninum v${{ matrix.selenium-version }}
      run: |
        pip install --upgrade selenium==${{ matrix.selenium-version }}
    - name: Install RF ${{ matrix.rf-version }}
      run: |
        pip install -U --pre robotframework==${{ matrix.rf-version }}
    - name: Install drivers via selenium-manager
      run: |
        if [[ ${{ matrix.selenium-version }} == '4.20.0' || ${{ matrix.selenium-version }} == '4.21.0' ]]; then
          SELENIUM_MANAGER_EXE=$(python -c 'from selenium.webdriver.common.selenium_manager import SeleniumManager; sm=SeleniumManager(); print(f"{str(sm._get_binary())}")')
        else
          SELENIUM_MANAGER_EXE=$(python -c 'from selenium.webdriver.common.selenium_manager import SeleniumManager; sm=SeleniumManager(); print(f"{str(sm.get_binary())}")')
        fi 
        echo "$SELENIUM_MANAGER_EXE"
        echo "WEBDRIVERPATH=$($SELENIUM_MANAGER_EXE --browser chrome --debug | awk '/INFO[[:space:]]Driver path:/ {print $NF;exit}')" >> "$GITHUB_ENV"
        echo "$WEBDRIVERPATH"
    - name: Generate stub file for ${{ matrix.python-version }}
      if: matrix.python-version != 'pypy-3.9'
      run: |
        invoke gen-stub
       
     # Temporarily ignoring pypy execution
    - name: Run tests with headless Chrome and with PyPy
      if: startsWith( matrix.python-version, 'pypy') == true
      run: |
        xvfb-run --auto-servernum python robot . --nounit --zip headlesschrome
    - name: Run tests with ${{ matrix.browser }} if CPython
      if: startsWith( matrix.python-version, 'pypy') == false
      run: |
        xvfb-run --auto-servernum python robot . --zip ${{ matrix.browser }}
        
    - name: Test Report Generation
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
       name: Report                # Name of the folder
       path: report.html           # Path to test results
